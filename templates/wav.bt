//------------------------------------------------
//--- 010 Editor v2.0 Binary Template
//
//      File: WAV.bt
//    Author: SweetScape Software, Paulo Max Gil I Reis
//   Version: 1.2
//   Purpose: Parse WAV audio files.
//  Category: Audio
// File Mask: *.wav
//  ID Bytes: 52 49 46 46 [+4] 57 41 56 45 //RIFF????WAVE
//   History:  
//   1.2   2020-02-04 Paulo Max: Improved to correct parsing of DVI ADPCM and fix some issues in subchunk list parsing.
//   1.1   2015-10-05 SweetScape: Updated header for repository submission.
//   1.0   SweetScape: Initial release.
//
// More information available at:
//  https://en.wikipedia.org/wiki/WAV
//------------------------------------------------
// Additional information:
//  http://www.piclist.com/techref/io/serial/midi/wave.html
//
//
//  https://web.archive.org/web/20160104081350/http://www.iem.thm.de/telekom-labor/zinke/nw/vp/doku/dito41.htm
//
//
//   http://www.topherlee.com/software/pcm-tut-wavformat.html
//
//
//   https://web.archive.org/web/20101207002408/http://www.it.fht-esslingen.de/~schmidt/vorlesungen/mm/seminar/ss00/HTML/node107.html
//
//
//   https://www.lightlink.com/tjweber/StripWav/WAVE.html
//
//
//   http://www-mmsp.ece.mcgill.ca/Documents/AudioFormats/WAVE/WAVE.html
//
//ffmpeg debug
//
//-------------------------------------------------
// Record whether we have found a format chunk yet
local int haveValidFormat = false;


//-----------------------------------
// Define structures used in WAV files

// Stores the file header information
typedef struct 
{
    char   groupID[4];
    long   hsize; //set at the end
    char   riffType[4];
} WAVRIFFHEADER;
//Formattag ()
typedef enum < ushort > e_Format_Tags {
	PCM = 0x0001,
    MS_ADPCM = 0x0002,//3%, invalid number of samples in packet, block predictor invalid, needs compression algorithm to be fixed
	ALAW = 0x0006,//92%
	MULAW = 0x0007,//92%
	OKI_ADPCM = 0x0010,// 92%
	G723_ADPCM = 0x0014, //12%, invalid number of bits
	DILOGIC_OKI_ADPCM = 0x0017,//87%
	YAMAHA_ADPCM = 0x0020, //91%
	DSPGROUP_TRUESPEECH = 0x0022, //14%, too small input buffer, need at least 32 bytes
	GSM610 = 0x0031, //8%, packet too short
	NMS_VBXADPCM = 0x0038,//5%, corrupt bitstream
	G721_ADPCM = 0x0040, //26%, invalid number of bits
	MPEG_1_LAYER_I_II = 0x0050, //3%, header missing, invalid data found
	MPEG_1_LAYER_III_MP3 = 0x0055, //0%, header missing, invalid data found
	XBOX_ADPCM = 0x0069, //33%
	CREATIVE_ADPCM = 0x0200, //99%
} E_FORMAT_TAGS;
typedef enum < ushort > e_Format_Tags_no_decoder {
	IEEE_FLOAT = 0x0003,
	IBM_CVSD = 0x0005, 
	DVI_IMA_ADPCM = 0x0011,
	MEDIASPACE_ADPCM = 0x0012,
	SIERRA_ADPCM = 0x0013,
	DIGISTD = 0x0015,
	DIGIFIX = 0x0016,
	SONARC = 0x0021,
	ECHOSC1 = 0x0023,
	AUDIOFILE_AF36 = 0x0024,
	APTX = 0x0025,
	AUDIOFILE_AF10 = 0x0026,
	DOLBY_AC2 = 0x0030,
	ANTEX_ADPCME = 0x0033,
	CONTROL_RES_VQLPC = 0x0034,
	CONTROL_RES_VQLPC_Alternate = 0x0035,
	DIGIADPCM = 0x0036,
	CONTROL_RES_CR10 = 0x0037,
	CS_IMAADPCM_ROLAND_RDAC = 0x0039,
	CREATIVE_FASTSPEECH8 = 0x0202,
	CREATIVE_FASTSPEECH10 = 0x0203,
	FM_TOWNS_SND = 0x0300,
	OLIGSM = 0x1000,
	OLIADPCM = 0x1001,
	OLICELP = 0x1002,
	OLISBC = 0x1003,
	OLIOPR = 0x1004,
} E_FORMAT_TAGS_NO_DECODER;
// Stores the format information for the file
typedef struct {
    char           chunkID[4];
    long           chunkSize = { 16 };
    local int pos = FTell();
	//E_FORMAT_TAGS current_format;
	//TODO use ReadBytes with 2 vectors
	//ReadBytes(current_format, FTell(), 4, e_format_tags, e_format_tags_no_decoder)
    E_FORMAT_TAGS          wFormatTag; //bugfixing formats 
    unsigned short wChannels; 
    unsigned long  dwSamplesPerSec; 
    unsigned long  dwAvgBytesPerSec; 
    unsigned short wBlockAlign<max=16>; 
    unsigned short wBitsPerSample; 

    if (wFormatTag == 17) //DVI IMA ADPCM
    {
        unsigned short wcbsize;
        unsigned short wSamplesPerBlock;
    }

    // Mark that we have found a valid format chunk
    haveValidFormat = true;

    // Unknown data at the end of the chunk
	Printf("ChunkSize: %d , pos: %i , FTell: %d\n", chunkSize, pos, FTell());
    if( chunkSize > (FTell() - pos) ){
        uchar unknown[ chunkSize - (FTell() - pos) ];
	}
		

    // Padding so the next chunk starts on an even byte
    if( chunkSize & 1 )
        uchar padding;
} FORMATCHUNK;

// Stores the actual wave data
typedef struct 
{
    char           chunkID[4];
	local int size_pos = FTell();
    long           chunkSize <min=32>;
	local long start = FTell();

    // Test if we have a valid format
    if( !haveValidFormat )
    {
        Warning( "File contains no valid WAVE format chunk." );
        return -1;
    }

    // Parse the samples of the data
    if( ((format.wBitsPerSample != 8) && (format.wBitsPerSample != 16) && (format.wBitsPerSample != 32)) 
        || format.wBlockAlign == 0 || (chunkSize % (int)format.wBlockAlign != 0) )
    {
        // Unsupported storage method used
        unsigned char  waveformData[chunkSize];
    }
    else if( (format.wChannels == 1) && (format.wBitsPerSample == 8) )
    {
        // Define an array of 8-bit samples - common case
        uchar samples[ chunkSize ];
    }
    else if( (format.wChannels == 1) && (format.wBitsPerSample == 16) )
    {
        // Define an array of 16-bit samples - common case
        short samples[ chunkSize/2 ];
    }
    else if( (format.wChannels == 1) && (format.wBitsPerSample == 32) )
    {
        // Define an array of 32-bit samples - common case
        int samples[ chunkSize/4 ];
    }
    else
    {
        // Define general case sample
        struct SAMPLES {
            if( format.wBitsPerSample == 8 )
                 uchar channels[ format.wChannels ];
            else if( format.wBitsPerSample == 16 )
                 short channels[ format.wChannels ];
            else if( format.wBitsPerSample == 32 )
                 int   channels[ format.wChannels ];
        } samples[ chunkSize / (int)format.wBlockAlign ];
    }
	//Fix size TODO
	local long end = FTell();
	local long real_size = end - start;
	FSeek(size_pos);
	local int evil = SetEvilBit(false);
	long real_chunkSize = {real_size};
	SetEvilBit(evil);
	FSeek(end); 
	//Fix size*/
    // Padding so the next chunk starts on an even byte
    if( (chunkSize & 1) && (FTell() < FileSize()) )
        uchar padding;
} DATACHUNK; 

// Stores the size of the wave after decompression
typedef struct
{
    char           chunkID[4];
    long           chunkSize = { 12 };
    unsigned long  uncompressedSize;
} FACTCHUNK;

// Stores a list of cue points or markers to points in the data
typedef struct {
    long    dwIdentifier;
    long    dwPosition;
    char    fccChunk[4];
    long    dwChunkStart;
    long    dwBlockStart;
    long    dwSampleOffset;
} CUEPOINT;

typedef struct {
    char      chunkID[4];
	local int size_pos = FTell();
    long      chunkSize;
	local int pos = FTell();
    local long start = FTell(); //TODO
    long      dwCuePoints;
    CUEPOINT  points[dwCuePoints];
	//Fix size TODO
	local long end = FTell();
	FSeek(size_pos);
	local int evil = SetEvilBit(false);
	long actual_chunkSize = {end - start};
	SetEvilBit(evil);
	FSeek(end); 
	/*Fix size*/
    // Unknown data at the end of the chunk
    if( chunkSize > (FTell() - pos) )
        uchar unknown[ chunkSize - (FTell() - pos) ];
} CUECHUNK; 

//subchunk struct for LIST chunk


typedef struct {
    char      chunkID[4];
	local int size_pos = FTell();
    long      chunkSize <min=1>;
	local long start = FTell(); //TODO
    char      listData[chunkSize];

	//Fix size TODO
	local long end = FTell();
	local long real_size = end - start;
	FSeek(size_pos);
	local int evil = SetEvilBit(false);
	long real_chunkSize = {real_size};
	SetEvilBit(evil);
	FSeek(end); 
	/*Fix size*/

    if( (chunkSize & 1) && (FTell() < FileSize()) )
        uchar padding;
} LISTSUBCHUNK;

// Define a list chunk with a set of subchunks
//chunkID = LIST
//chunkSize = whole list size
//chunkType = INFO (so far no other values found)
//+ listsubchunks
local string list_tag_values_possible[] = { //"0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
											"a", "b", "c", "d", "e", "f", "g", "h", "i", "j",
											"A", "B", "C", "D", "E", "F", "G", "H", "I", "J",
											"k", "l", "m", "n", "o", "p", "q", "r", "s", "u",
											"K", "L", "M", "N", "O", "P", "Q", "R", "S", "U",
											"v", "w", "x", "y", "z",
											"V", "W", "X", "Y", "Z"};
typedef struct {
    char      chunkID[4];
    long      chunkSize <min=1>;
    local quad pos = FTell();
	//List tag is not allowed to contain specific symbols
	local char list_tag[1];
	ReadBytes(list_tag, FTell(), 1, list_tag_values_possible, list_tag_values_possible);
	ReadBytes(list_tag, FTell(), 1, list_tag_values_possible, list_tag_values_possible);
	ReadBytes(list_tag, FTell(), 1, list_tag_values_possible, list_tag_values_possible);
	ReadBytes(list_tag, FTell(), 1, list_tag_values_possible, list_tag_values_possible);
    //char      chunkType[4];
    local uint size;

    // Read the subchunks
    while( FTell() - pos < chunkSize ) {
        size = ReadUInt( FTell()+4 );
        if  (FTell() - pos + size<= chunkSize)
            LISTSUBCHUNK subchunk;
        else
            uchar unknown[ chunkSize - (FTell() - pos) ];       
    }

    // Padding so the next chunk starts on an even byte
    if( (chunkSize & 1) && (FTell() < FileSize()) )
        uchar padding;
} LISTCHUNK;
//NEW CHUNKS------------------------------------------------------------------------------------------------------
//Playlist chunk, sets order of cuepoints to be played ID is "plst"
typedef struct {
  long    dwIdentifier;
  long    dwLength;
  long    dwRepeats;
} Segment;

typedef struct {
  char      chunkID[4];
  long      chunkSize;//Segment size + dwSegments size
  long      dwSegments;
  Segment   Segments[dwSegments]; //no order needed
} PlaylistChunk;
/*
//ID list
typedef struct {
  char      listID[4];    // 'list' 
  long    chunkSize;   // includes the Type ID below 
  char      typeID[4];     // 'adtl' 
} ListHeader;
*/
//ID labl
typedef struct {
  char      chunkID[4];
  long    chunkSize; //dwIdentifier size + dwText size
  long    dwIdentifier;
  char    dwText[chunkSize - 4]; //null terminated string
} LabelChunk;

//ID note
typedef struct {
  char      chunkID[4];
  long    chunkSize; //dwIdentifier size + dwText size
  long    dwIdentifier;
  char    dwText[chunkSize - 4]; //null terminated String 
} NoteChunk;

//ID ltxt
typedef struct {
  char      chunkID[4];
  long    chunkSize; //starts after chunkSize field
  long    dwIdentifier;
  long    dwSampleLength;
  long    dwPurpose; //associated data list generic IDs
  short   wCountry;
  short   wLanguage;
  short   wDialect;
  short   wCodePage;
  char    dwText[chunkSize - 28]; //null terminated string
} LabelTextChunk;

//ID smpl
typedef struct {
  char             chunkID[4];
  long           chunkSize; //starts after chunkSize field
  long           dwManufacturer; //set to 0 for no specific manufacturer
  long           dwProduct;
  long           dwSamplePeriod;
  long           dwMIDIUnityNote;
  long           dwMIDIPitchFraction;
  long           dwSMPTEFormat;
  long           dwSMPTEOffset;
  long           cSampleLoops;
  long           cbSamplerData;
  struct SampleLoop Loops[];
} SamplerChunk;

//from SamplerChunk
typedef struct {
  long  dwIdentifier;
  long  dwType;
  long  dwStart;
  long  dwEnd;
  long  dwFraction;
  long  dwPlayCount;
} SampleLoop;

//ID inst
typedef struct {
  char     chunkID[4];
  long   chunkSize = { 7 }; //starts after chunkSize field
  unsigned char UnshiftedNote;
  char          FineTune;
  char          Gain;
  unsigned char LowNote;
  unsigned char HighNote;
  unsigned char LowVelocity;
  unsigned char HighVelocity;
} InstrumentChunk;
//"inst", "smpl", "ltxt", "note", "labl", "list", "plst"
//NEW CHUNKS END --------------------------------------------------------------------------------------------------
// A chunk which could not be identified
typedef struct {
    char      chunkID[4];
    long      chunkSize <min=1>;
    uchar     unknownData[chunkSize];

    // Padding so the next chunk starts on an even byte
    if( (chunkSize & 1) && (FTell() < FileSize()) )
        uchar padding;
} UNKNOWNCHUNK;

//---------------------------------------------

// Define the headers
LittleEndian(); 
SetBackColor( cLtPurple );
WAVRIFFHEADER header;

// Check for valid header
if( header.groupID != "RIFF" || header.riffType != "WAVE" )
{
    Warning( "File is not a valid wave file. Template stopped." );
    return -1;
}

// Read the file as a set of chunks
local char chunk_tag[4];
local int compressed_wav = false;

local string tag_values_possible[] = { "fmt " };
local string tag_values_preferred[] = { "fmt " };

while(ReadBytes(chunk_tag, FTell(), 4, tag_values_preferred, tag_values_possible)){
    // See which chunk this is
    switch( chunk_tag )
    {
        case "fmt ":
            SetBackColor( cLtGray );
            FORMATCHUNK format;
			tag_values_preferred -= "fmt "; //remove fmt tag, it is only allowed once
			tag_values_possible -= "fmt ";
			tag_values_preferred += "data";
			tag_values_possible += "data";
            break;
        case "data":
            SetBackColor( cNone );
            DATACHUNK   data;
			tag_values_preferred -= "data"; //remove data tag, it is only allowed once
			tag_values_possible -= "data";
			//if (isCompressed == 1) {
				//tag_values_preferred -= "fact";
				//tag_values_possible += "fact"; 
				//break;
			//}
			tag_values_possible += ( "fact", "cue ", "LIST"); //TODO enforce fact chunk for compressed formats, check list
            break;
		//TODO check number of occurences for fact chunk
        case "fact":
            SetBackColor( cLtBlue );
            FACTCHUNK   fact;
			//if (isCompressed == 1){
				//tag_values_preferred -= "fact" ;
				//isCompressed = false;
				//tag_values_possible += {"cue ", "LIST"};
				//break;
			//}
			tag_values_possible -= "fact";
			tag_values_preferred -= "fact" ;
            break;
        case "cue ":
            SetBackColor( cLtGray );
            CUECHUNK    cue;
			tag_values_preferred -= "cue "; //remove cue tag, it is only allowed once
			tag_values_possible -= "cue ";
            break;
        case "LIST":
            SetBackColor( cLtYellow );
            LISTCHUNK   list;
            break;
        default:
            // Unknown chunk
            SetBackColor( cNone );
            UNKNOWNCHUNK unknown;
            break;
    }
}

// adding file size to header, needed to be parsed
local int file_size = FTell();
FSeek(4);
long real_hsize = { file_size - 8 };

