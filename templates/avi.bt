//------------------------------------------------
//--- 010 Editor v1.2 Binary Template
//
//      File: AVI.bt
//   Authors: Blaine Lefebvre [bl], Elias Bachaalany [eb]
//   Version: 1.2
//   Purpose: Parse an AVI movie file.
//  Category: Video
// File Mask: *.avi
//  ID Bytes: 52 49 46 46 [+4] 41 56 49 20 //RIFF????AVI 
//   History: 
//   1.2   2016-01-27 SweetScape: Updated header for repository submission, added coloring for header.
//   1.1   2006-10-02 eb: Added BITMAPINFO and WAVEFORMATEX proper strfHEADER recognition,
//                      Fixed 'idx1' parsing.
//   1.0   bl: Initial release.
//------------------------------------------------

typedef struct
{ 
  WORD  wFormatTag; 
  WORD  nChannels; 
  DWORD nSamplesPerSec; 
  DWORD nAvgBytesPerSec; 
  WORD  nBlockAlign; 
  WORD  wBitsPerSample; 
  WORD  cbSize; 
} WAVEFORMATEX; 

// head structure info
typedef struct 
{
    DWORD  dwMicroSecPerFrame;
    DWORD  dwMaxBytesPerSec;
    DWORD  dwReserved1;
    DWORD  dwFlags;
    DWORD  dwTotalFrames;
    DWORD  dwInitialFrames;
    DWORD  dwStreams;
    DWORD  dwSuggestedBufferSize;
    DWORD  dwWidth;
    DWORD  dwHeight;
    DWORD  dwScale;
    DWORD  dwRate;
    DWORD  dwStart;
    DWORD  dwLength;
} MainAVIHeader;

typedef struct
{
  uint32 biSize;
  uint32 biWidth;
  uint32 biHeight;
  uint16 biPlanes;
  uint16 biBitCount;
  uint32 biCompression;
  uint32 biSizeImage;
  uint32 biXPelsPerMeter;
  uint32 biYPelsPerMeter;
  uint32 biClrUsed;
  uint32 biClrImportant;
} BITMAPINFOHEADER;

typedef struct 
{
  unsigned char rgbBlue;
  unsigned char rgbGreen;
  unsigned char rgbRed;
  unsigned char rgbReserved;
} RGBQUAD;

typedef struct 
{
  BITMAPINFOHEADER bmiHeader;
  RGBQUAD bmiColors;
} BITMAPINFO;

typedef struct 
{
  char id[4];
  uint32 avi_hdr_datalen = { 56 }; //len(MainAVIHeader)
  MainAVIHeader data;
} avihHEADER;


// header stream structure info
typedef struct 
{
    char   fccType[4] = { "vids", "auds" };
    char   fccHandler[4];
    DWORD  dwFlags;
    DWORD  dwReserved1;
    DWORD  dwInitialFrames;
    DWORD  dwScale;
    DWORD  dwRate;
    DWORD  dwStart;
    DWORD  dwLength;
    DWORD  dwSuggestedBufferSize;
    DWORD  dwQuality;
    DWORD  dwSampleSize;
    DWORD  xdwQuality;
    DWORD  xdwSampleSize;
} AVIStreamHeader;

typedef struct 
{
  char id[4];
  uint32  strh_hdr_datalen = {56}; //len(AVIStreamHeader)
  AVIStreamHeader data;
}strhHEADER;


// Generic strfHEADER
typedef struct 
{
  char id[4];
  uint32  strf_hdr_datalen<arraylength=true>;
  if (strf_hdr_datalen % 2)
	  char data[strf_hdr_datalen+1];
  else
	  char data[strf_hdr_datalen];
} strfHEADER;

// strfHEADER with BITMAPINFOHEADER
typedef struct 
{
  char id[4];
  uint32  strf_hdr_bih_datalen<min = 40, max = 58>;
  Printf("STRF_HDR_BIH_DATALEN: %d\n", strf_hdr_bih_datalen);
  BITMAPINFOHEADER bmiHeader;
  local int sz = sizeof(bmiHeader); //This is 40
  if (strf_hdr_bih_datalen == 44)
  {
    RGBQUAD bmiColors;
    sz += 4;
  }
  Printf("left: %d\n", sz);
  local uint exDataLen = strf_hdr_bih_datalen - sz;
  Printf("exDataLen: %d\n", exDataLen);
  char exData[exDataLen];
} strfHEADER_BIH;


// strfHEADER with WAVEFORMAT
typedef struct 
{
  char id[4];
  uint32  strf_hdr_wave_datalen<min = 20, max = 36>;
  Printf("%d\n", strf_hdr_wave_datalen);
  WAVEFORMATEX wave;
  char exData[strf_hdr_wave_datalen - 18];
} strfHEADER_WAVE;

//
typedef struct 
{
  char id[4];
  uint32  strn_hdr_datalen<arraylength=true>;
  if ( strn_hdr_datalen % 2 )
    char data[strn_hdr_datalen+1];
  else
    char data[strn_hdr_datalen];
} strnHEADER;

//
typedef struct 
{
  char id[4];
  uint32  generic_blk_datalen<arraylength=true>;
  if ( generic_blk_datalen % 2 )
    char data[generic_blk_datalen+1];
  else
    char data[generic_blk_datalen];
} genericblock;

typedef struct 
{
  char id[4] = {"RIFF", "LIST"};
  local uint datalen_pos = FTell();
  uint32 list_hdr_datalen<min = 6, max = 22>;
  char type[4] = { "hdrl", "strl", "movi" };

  if (!Memcmp(type,"hdrl",4))
  {
    avihHEADER avhi;
  }
  else if (!Memcmp(type,"strl",4))
  {
    strhHEADER strh;
    if (Memcmp(strh.data.fccType, "vids", 4) == 0)
    {
      strfHEADER_BIH strf;
    }
    else if (Memcmp(strh.data.fccType, "auds", 4) == 0)
    {
      strfHEADER_WAVE strf;
    }
    else
    {
      strfHEADER strf;
    }
    strnHEADER strn;
  }
  else if (Memcmp(type,"movi",4) == 0)
  {
    local int32 pointer = 0;
    local int32 stop = list_hdr_datalen - 4;
    
    //Printf("stop=%d\n", stop);

    do
    {
      local uint generic_start = FTell();
      genericblock gb;
      pointer += (FTell() - generic_start);

      //pointer += sizeof(gb);
      //Printf("+%x = %d\n", gb.datalen, pointer);

    } while (pointer < stop); // Changed from !=

    //Fix the datalength in case not equal
    local uint after_pos = FTell();
    FSeek(datalen_pos);
    local uint evil_state = SetEvilBit(false);
    uint32 list_hdr_datalen = { (uint32)pointer + 4 };
    SetEvilBit(evil_state);
    FSeek(after_pos);

  }
  else
  {
    char data[list_hdr_datalen-4];
  }
} LISTHEADER;

typedef enum <DWORD> {
  FORMAT_UNKNOWN,
  FORMAT_PAL_SQUARE,
  FORMAT_PAL_CCTR_601,
  FORMAT_NTSC_SQUARE,
  FORMAT_NTSC_CCTR_601
} VIDEO_FORMAT;

typedef enum <DWORD> {
  STANDARD_UNKNOWN,
  STANDARD_PAL,
  STANDARD_NTSC,
  STANDARD_SECAM
} VIDEO_STANDARD;

typedef struct {
  DWORD CompressedBMHeight;
  DWORD CompressedBMWidth;
  DWORD ValidBMHeight;
  DWORD ValidBMWidth;
  DWORD ValidBMXOffset;
  DWORD ValidBMYOffset;
  DWORD VideoXOffsetInT;
  DWORD VideoYValidStartLine;
} VIDEO_FIELD_DESC;

typedef struct {

  char id[4];
  uint32 vprp_datalen;

  local uint vprp_start = FTell();
  VIDEO_FORMAT VideoFormatToken;
  VIDEO_STANDARD VideoStandard;
  DWORD dwVerticalRefreshRate;
  DWORD dwHTotalInT;
  DWORD dwVTotalInLines;
  DWORD dwFrameAspectRatio;
  DWORD dwFrameWidthInPixels;
  DWORD dwFrameHeightInLines;
  DWORD nbFieldPerFrame = { 0x01, 0x02 };
  VIDEO_FIELD_DESC FieldInfo[nbFieldPerFrame];
  local uint vprp_end = FTell();

  FSeek(vprp_start - 4);
  local uint evil_state = SetEvilBit(false);
  uint32 vprp_datalen = {vprp_end - vprp_start};
  SetEvilBit(evil_state);
  FSeek(vprp_end);

} VideoPropHeader;

// junk structure info
typedef struct 
{
  char id[4];
  uint32  junk_hdr_datalen<arraylength=true>;
  if ( junk_hdr_datalen % 2 )
    char data[junk_hdr_datalen+1];
  else
    char data[junk_hdr_datalen];
} JUNKHEADER;


// aviindex structure info
typedef struct 
{
    DWORD  ckid;
    DWORD  dwFlags;
    DWORD  dwChunkOffset;
    DWORD  dwChunkLength;
} AVIINDEXENTRY;

typedef struct 
{
  char id[4];

  //Need multiple of 16 (len(AVIINDEXENTRY)) => 4-LSB Zero
  local uint32 zero_value[] = { 0x00 };
  uint32 zero:4<values=zero_value>;
  uint32 idx1_hdr_datalen:28<arraylength=true>;

  AVIINDEXENTRY data[idx1_hdr_datalen];

} idx1HEADER;

// root structure info
typedef struct xroot 
{
  char id[4] = { "RIFF" }; // RIFF
  if (root.id[3] == 'X')
  {
    Printf("Motorola format\n");
    BigEndian();
  }
  else
  {
    Printf("Intel format\n");
    LittleEndian();
  }

  local uint root_datalen_pos = FTell();
  uint32  root_datalen<arraylength=true>;

  local uint evil_state = SetEvilBit(false);
  char form[4] = { "AVI " };
  SetEvilBit(evil_state);

  if (Strcmp(form, "AVI "))
  {
    Warning("Not a valid AVI file");
    return -1;
  }
} ROOT <bgcolor=cLtGray>;

local char nheader[4];

ROOT root;

local string nheader_preferred[] = { "LIST", "JUNK" };
local string nheader_possible[] = { "LIST", "JUNK", "idx1", "vprp" };

while (!FEof())
{

  ReadBytes(nheader, FTell(), 4, nheader_preferred, nheader_possible);

  if (Memcmp(nheader, "LIST", 4) == 0)
  {
    LISTHEADER list;
  }
  else if (Memcmp(nheader, "JUNK", 4) == 0)
  {
    JUNKHEADER junk;
  }
  else if (Memcmp(nheader, "idx1", 4) == 0)
  {
    idx1HEADER idx1;
  }
  else if (Memcmp(nheader, "vprp", 4) == 0)
  {
    VideoPropHeader vprp;
  }
  else
  {
    genericblock unknown_block;
  }
}

local uint file_end = FTell();
FSeek(root.root_datalen_pos);
local uint evil_state = SetEvilBit(false);
uint32 root_datalen = {file_end - 8};
SetEvilBit(evil_state);
FSeek(file_end);