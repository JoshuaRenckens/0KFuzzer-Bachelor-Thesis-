//------------------------------------------------
//--- 010 Editor v8.0 Binary Template
//
//      File: MP4.bt
//   Authors: Alexey Lyashko, Andrew Molyneux, Marian Denes, SweetScape, Marko Musa
//   Version: 3.3
//   Purpose: Defines a template for parsing MP4 and MOV video files.
//  Category: Video
// File Mask: *.mp4,*.mov,*.m4v
//  ID Bytes: [+4] 66 74 79 70, [+4] 6D 6F 6F 76, [+4] 6D 64 61 74
//   History:
//   3.3   2019-08-08 M. Musa: Modified box logic to respect box size in header.
//   3.2   2019-02-03 A. Lyashko: Added support for fragmented MP4 files.
//   3.1   2018-06-17 A. Lyashko: Added support for sample table atoms.
//   3.0   2017-10-03 A Molyneux: Total rewrite, more complete and robust.
//   2.2   2016-01-29 SweetScape: Updated header for repository submission.
//   2.1   2015-06-04 M Denes: Public release.
//------------------------------------------------

BigEndian();

struct fp16;
struct fp32;
struct fp32uvw;
struct matrix;
struct fourcc;
struct boxheader;
struct compatible_brand;
struct mp4box;
struct mp4time;
struct mp4lang;
struct qtopcolor;
struct elst_entry;
struct tkhd_flags;
struct vmhd_flags;
 
//enum declaration 
enum qtlang
{
    qtlEnglish            = 0,
    qtlFrench             = 1,
    qtlGerman             = 2,
    qtlItalian            = 3,
    qtlDutch              = 4,
    qtlSwedish            = 5,
    qtlSpanish            = 6,
    qtlDanish             = 7,
    qtlPortuguese         = 8,
    qtlNorwegian          = 9,
    qtlHebrew             = 10,
    qtlJapanese           = 11,
    qtlArabic             = 12,
    qtlFinnish            = 13,
    qtlGreek              = 14,
    qtlIcelandic          = 15,
    qtlMaltese            = 16,
    qtlTurkish            = 17,
    qtlCroatian           = 18,
    qtlChineseTraditional = 19,
    qtlUrdu               = 20,
    qtlHindi              = 21,
    qtlThai               = 22,
    qtlKorean             = 23,
    qtlLithuanian         = 24,
    qtlPolish             = 25,
    qtlHungarian          = 26,
    qtlEstonian           = 27,
    qtlLettish            = 28,
    qtlLatvian            = 28,
    qtlSaami              = 29,
    qtlSami               = 29,
    qtlFaroese            = 30,
    qtlFarsi              = 31,
    qtlRussian            = 32,
    qtlChineseSimplified  = 33,
    qtlFlemish            = 34,
    qtlIrish              = 35,
    qtlAlbanian           = 36,
    qtlRomanian           = 37,
    qtlCzech              = 38,
    qtlSlovak             = 39,
    qtlSlovenian          = 40,
    qtlYiddish            = 41,
    qtlSerbian            = 42,
    qtlMacedonian         = 43,
    qtlBulgarian          = 44,
    qtlUkrainian          = 45,
    qtlBelarusian         = 46,
    qtlUzbek              = 47,
    qtlKazakh             = 48,
    qtlAzerbaijani        = 49,
    qtlAzerbaijanAr       = 50,
    qtlArmenian           = 51,
    qtlGeorgian           = 52,
    qtlMoldavian          = 53,
    qtlKirghiz            = 54,
    qtlTajiki             = 55,
    qtlTurkmen            = 56,
    qtlMongolian          = 57,
    qtlMongolianCyr       = 58,
    qtlPashto             = 59,
    qtlKurdish            = 60,
    qtlKashmiri           = 61,
    qtlSindhi             = 62,
    qtlTibetan            = 63,
    qtlNepali             = 64,
    qtlSanskrit           = 65,
    qtlMarathi            = 66,
    qtlBengali            = 67,
    qtlAssamese           = 68,
    qtlGujarati           = 69,
    qtlPunjabi            = 70,
    qtlOriya              = 71,
    qtlMalayalam          = 72,
    qtlKannada            = 73,
    qtlTamil              = 74,
    qtlTelugu             = 75,
    qtlSinhala            = 76,
    qtlBurmese            = 77,
    qtlKhmer              = 78,
    qtlLao                = 79,
    qtlVietnamese         = 80,
    qtlIndonesian         = 81,
    qtlTagalog            = 82,
    qtlMalayRoman         = 83,
    qtlMalayArabic        = 84,
    qtlAmharic            = 85,
    qtlGalla              = 87,
    qtlOromo              = 87,
    qtlSomali             = 88,
    qtlSwahili            = 89,
    qtlKinyarwanda        = 90,
    qtlRundi              = 91,
    qtlNyanja             = 92,
    qtlMalagasy           = 93,
    qtlEsperanto          = 94,
    qtlWelsh              = 128,
    qtlBasque             = 129,
    qtlCatalan            = 130,
    qtlLatin              = 131,
    qtlQuechua            = 132,
    qtlGuarani            = 133,
    qtlAymara             = 134,
    qtlTatar              = 135,
    qtlUighur             = 136,
    qtlDzongkha           = 137,
    qtlJavaneseRom        = 138,
    qtlUnspecified        = 32767
};
enum <uint16> qtgfxmode
{
    qtgCopy               = 0x000,
    qtgDitherCopy         = 0x040,
    qtgBlend              = 0x020,
    qtgTransparent        = 0x024,
    qtgStraightAlpha      = 0x100,
    qtgPremulWhiteAlpha   = 0x101,
    qtgPremulBlackAlpha   = 0x102,
    qtgStraightAlphaBlend = 0x104,
    qtgComposition        = 0x103
};

//function declaration
uint64 ContentSize(boxheader& bh)
{
    return (exists(bh.size64) ? bh.size64 : bh.size) - sizeof(bh);
}
uint64 BoxSize(boxheader& bh)
{
    return (exists(bh.size64) ? bh.size64 : bh.size);
}
string ReadFP32(fp32& f)
{
    local string buf;
    SPrintf(buf, "%lf", (double)f.value / (double)0x10000);
    return buf;
}
wstring ReadBox(mp4box& box)
{
    return box.hdr.type.value;
}
string PipeConcat(string s1, string s2)
{
    if (Strlen(s1) > 0)
    {
        return s1 + " | " + s2;
    }
    return s2;
}
string ReadVmhdFlags(vmhd_flags& f)
{
    local string result;
    if (f.no_lean_ahead)
    {
        result = "No lean ahead";
    }
    return result;
}

//struct declaration 
typedef struct //fp16 
{
    int16 value;
} fp16;
typedef struct //fp32
{
    int32 value;
} fp32;
typedef struct //fp32uvw
{
    int32 value;
} fp32uvw;
typedef struct //matrix
{
    fp32 a;
    fp32 b;
    fp32uvw u;
    fp32 c;
    fp32 d;
    fp32uvw v;
    fp32 x;
    fp32 y;
    fp32uvw w;
} matrix;
typedef struct //fourcc
{
	byte value[4] = { "dinf", "edts", "mdia", "minf", "moov", "moof", "stbl", "trak", "udta", "traf", "mvex", "sinf", "schi", "frma", "tenc", "schm", "pssh", "senc", "saio", "saiz", "trun", "tfhd", "mfhd", "sidx", "trex", "mehd", "stsd", "enca", "stts", "stsc", "stco", "co64", "stsz", "stss", "elst", "ftyp", "hdlr", "mdhd", "mvhd", "smhd", "tkhd", "vmhd" };
} fourcc;
typedef struct //boxheader
{
    uint32 size;
    fourcc type;
    if (size == 1)
    {
        uint64 size64;
    }
} boxheader;
typedef struct //compatible_brand
{
    fourcc brand;
} compatible_brand;
typedef struct //mp4time
{
    uint32 value;
} mp4time;
typedef struct //mp4lang
{
    uint16 value;
} mp4lang;
typedef struct //qtopcolor
{
    uint16 red;
    uint16 green;
    uint16 blue;
} qtopcolor;
typedef struct //elst_entry
{
	//TODO include dependency to version?
    uint32 duration;
    uint32 media_time;
    fp32 media_rate;
} elst_entry;
typedef struct //tkhd_flags
{
    byte dummy[2];
    byte dummy2 : 4;
    byte track_in_poster : 1;
    byte track_in_preview : 1;
    byte track_in_movie : 1;
    byte track_enabled : 1;
} tkhd_flags;
typedef struct //vmhd_flags
{
    byte dummy[2];
    byte dummy2 = {1};
} vmhd_flags;
typedef struct //str_stts
{
    uint32 sample_count;
    uint32 sample_delta;
}str_stts;
typedef struct //str_stsd
{
    uint32 contentSize;
    byte   content[contentSize - 4];
}str_stsd;
typedef struct //str_sidx
{
    uint32 reference_size31_type1;
    uint32 subsegment_duration;
    uint32 SAP_delta_time28_type3_starts_with1;
}str_sidx;


local uint32 sharedSamplecountVar = 0;
local uint32 mdatPosition;
typedef struct //mp4box
{    
    local uint64 startOffset = FTell();

	uint32 size; //TODO support 64bit size
	
    fourcc type;
	
    local int64 endOffset = startOffset + size;
    local uint64 contentsize = size-8;
    
    switch (type.value)
    {
        case "moof":
        case "traf":
        case "mvex":
        case "sinf":
        case "schi":
            while (FTell() < endOffset)
            {
                mp4box box;
                FSeek(box.endOffset);
            }
            break;
        case "moov":
			local char chunk_type[4];
			local string preferred_blocks[] = { "mvhd", "trak"};
			local string possible_blocks[] = { "mvhd", "trak"}; //TODO reenable "udta" "iods", "meta"
			while (ReadBytes(chunk_type, FTell() + 4, 4, preferred_blocks, possible_blocks)) {
				switch(chunk_type){
					case "mvhd":
						mp4box mvhd_block;
						preferred_blocks -= "mvhd";	
						possible_blocks -= "mvhd";
						break;
					case "trak":
						mp4box trak_block;
						preferred_blocks -= "trak";	
						possible_blocks -= "trak";	 //TODO remove, multiple tracks are possible, eg for video and audio
						break;
					case "iods":
						mp4box iods_block;
						possible_blocks -= "iods";	
						break;
					case "udta":
						mp4box udta_block;
						possible_blocks -= "udta";	
						break;
					case "meta":
						mp4box meta_block;
						possible_blocks -= "meta";	
						break;
					default:
						mp4box unknown_block;
						break;
				}
			}
			break;
		case "ftyp":         
			//there are multiple valid constalations for video mp4, I now focus on one specific constalation which looks like it is most common

            //char major_brand[4] = { {"avc1"}, {"iso2"}, {"isom"}, {"mmp4"}, {"mp41"}, {"mp42"}, {"mp71"}, {"msnv"}, {"ndas"}, {"ndsc"}, {"ndsh"}, {"ndsm"}, {"ndsp"}, {"ndss"}, {"ndxc"}, {"ndxh"}, {"ndxm"}, {"ndxp"}, {"ndxs"} };
			char major_brand[4] = {"isom"};
			uint32 major_version = {512};
			
			local char chunk_type[4];
			local string compatiple_brands[] = {"isom", "iso2", "avc1", "mp41"};
			while (ReadBytes(chunk_type, FTell(), 4, compatiple_brands, compatiple_brands)) {
				char compatiple_brand[4];
				compatiple_brands -= chunk_type;			
			}
			break;
		case "mvhd":
            byte version = {0};
            byte flags[3];
			uint32 create_time;
			uint32 modify_time;
			uint32 time_scale;
			uint32 duration;
            fp32 preferred_rate;
            fp16 preferred_volume;
            byte reserved[10];
            matrix matrix_structure;
            uint32 preview_time;
            uint32 preview_duration;
            uint32 poster_time;
            uint32 selection_time;
            uint32 selection_duration;
            uint32 current_time;
            uint32 next_track_id;
            break;
		case "mdat":
			uint32 length;
			mdatPosition = FTell();
			byte data[length]; //TODO maybe look into a sensefull encoding of the data
            break;
		case "iods":
			uint32 num_entries;
			FSeek(FTell()-4);
			uint32 track_IDs[num_entries]; 			
            break;
		case "tref": 
			uint32 num_entries;
			FSeek(FTell()-4);
			uint32 track_IDs[num_entries]; 			
            break;
		case "trak": 
			local char chunk_type[4];
			local string preferred_blocks[] = { "tkhd", "mdia"};
			local string possible_blocks[] = { "tkhd", "mdia"}; //TODO reenable "meta", "tref", "edts", "udta"
			while (ReadBytes(chunk_type, FTell() + 4, 4, preferred_blocks, possible_blocks)) {
				switch(chunk_type){
					case "tkhd":
						mp4box tkhd_block;
						preferred_blocks -= "tkhd";
						break;
					case "mdia":
						mp4box mdia_block;
						preferred_blocks -= "mdia";
						break;
					case "meta":
						mp4box meta_block;
						break;
					case "tref":
						mp4box tref_block;
						break;
					case "edts":
						mp4box edts_block;
						break;
					case "udta":
						mp4box udta_block;
						break;
					default:
						mp4box unknown_block;
						break;
				}
				possible_blocks -= chunk_type;
			}
			break;
        case "tkhd":
            byte version = {0};
			tkhd_flags flags;
			uint32 create_time;
			uint32 modify_time;
			uint32 track_id;
			uint32 reserved;
			uint32 duration;
			local uint32 durationVar = duration;
			while(durationVar < 3){
				FSeek(FTell()-4);
				uint32 duration;
				durationVar = duration;
			}
            uint64 reserved2;
            uint16 layer;
            uint16 alt_group;
            fp16 volume;
            uint16 reserved3;
            matrix matrix_structure;
            fp32 width;
            fp32 height;
            break;
		case "mdia": 
			local char chunk_type[4];
			local string preferred_blocks[] = { "mdhd", "hdlr", "minf"};
			local string possible_blocks[] = { "mdhd", "hdlr", "minf"};
			while (ReadBytes(chunk_type, FTell() + 4, 4, preferred_blocks, possible_blocks)) {
				switch(chunk_type){
					case "mdhd":
						mp4box mdhd_block;
						break;	
					case "hdlr":
						mp4box hdlr_block;
						break;	
					case "minf":
						mp4box minf_block;
						break;
					default:
						mp4box unknown_block;
						break;							
				}
				preferred_blocks -= chunk_type;
				possible_blocks -= chunk_type;
			}  
			break;
		case "mdhd":
            byte version = {0};
            byte flags[3];
			uint32 create_time;
			uint32 modify_time;
			uint32 time_scale;
			uint32 duration;		   
            mp4lang language;
            uint16 quality;
            break;
		case "hdlr":
            byte version = {0};
            byte flags[3];
            uint32 pre_defined = {0}; 
            uint32 handler_type = {0x76696465}; // = "vide" 
            uint64 reserved = {0x6170706C00000000}; //app1....
            byte rest[17];
            break;
		case "edts":
			local char chunk_type[4];
			local string preferred_blocks[0];
			local string possible_blocks[] = { "elst"};
			if(ReadBytes(chunk_type, FTell() + 4, 4, preferred_blocks, possible_blocks)){
				mp4box elst_block;
			}			
			break;
		case "udta":
			local char chunk_type[4];
			local string blocks[] = { "meta"};
			if(ReadBytes(chunk_type, FTell() + 4, 4, blocks, blocks)){
				switch(chunk_type){
					case "meta":
						mp4box meta_block;
						blocks -= chunk_type;
						break;
					default:
						mp4box unkown_block;
						break;
					}
			}	  
			break;
		case "meta":
			local char chunk_type[4];
			local string preferred_blocks[] = { "hdlr"};
			local string possible_blocks[] = { "hdlr"}; // TODO add "iloc" "pitm" "ipro" "ipmc" "xml " or "bxml"
			while (ReadBytes(chunk_type, FTell() + 4, 4, preferred_blocks, preferred_blocks)) {
				switch(chunk_type){
					case "hdlr":
						mp4box hdlr_block;
						preferred_blocks -= "hdlr";
						break;				
					case "iinf":
						mp4box iinf_block;
						break;
					case "dinf":
						mp4box dinf_block;
						break;
					case "iloc":
						mp4box iloc_block;
						break;
					case "pitm":
						mp4box pitm_block;
						break;
					case "ipro":
						mp4box ipro_block;
						break;
					case "ipmc":
						mp4box ipmc_block;
						break;
					case "xml ":
						mp4box xml_block;
						break;
					case "bxml":
						mp4box bxml_block;
						break;
					default:
						mp4box unknown_block;
						break;
				}
				possible_blocks -= chunk_type;
			} 
			break;
		case "minf":
			local char chunk_type[4];
			local string preferred_blocks[] = {"vmhd", "dinf", "stbl"}; //TODO add "hmhd", "nmhd" for more variety, reenable "vmhd"
			local string possible_blocks[] = {"vmhd", "dinf", "stbl"}; //TODO readd "vmhd" 
			while (ReadBytes(chunk_type, FTell() + 4, 4, preferred_blocks, possible_blocks)) {
				switch(chunk_type){
					case "vmhd":
						mp4box vmhd_block;						
						preferred_blocks -= ("vmhd", "smhd", "hmhd", "nmhd");
						possible_blocks -= ("vmhd", "smhd", "hmhd", "nmhd");
						break;
					case "smhd":
						mp4box smhd_block;						
						preferred_blocks -= ("vmhd", "smhd", "hmhd", "nmhd");
						possible_blocks -= ("vmhd", "smhd", "hmhd", "nmhd");
						break;
					case "hmhd":
						mp4box hmhd_block;						
						preferred_blocks -= ("vmhd", "smhd", "hmhd", "nmhd");
						possible_blocks -= ("vmhd", "smhd", "hmhd", "nmhd");
						break;
					case "nmhd":
						mp4box nmhd_block;						
						preferred_blocks -= ("vmhd", "smhd", "hmhd", "nmhd");
						possible_blocks -= ("vmhd", "smhd", "hmhd", "nmhd");
						break;
					case "stbl":
						mp4box stbl_block;						
						preferred_blocks -= chunk_type;
						possible_blocks -= chunk_type;
						break;
					case "dinf":
						mp4box dinf_block;						
						preferred_blocks -= chunk_type;
						possible_blocks -= chunk_type;
						break;
					default:
						mp4box unknown_block;
						break;
				}
			} 	
			break;
        case "stbl":
			local char chunk_type[4];
			local string preferred_blocks[] = {"stts", "stsd", "stsc", "stco"}; //TODO add "stsz" and "stz2" as alternative to "stsz", reenable "co64"
			local string possible_blocks[] = {"stts", "stsd", "stsc",  "stco"}; //TODO add "stsz", "ctts", "stss", "stsh", "stdb", "sdtp", "sbgp", "sgpd", "subs",
			
			while (ReadBytes(chunk_type, FTell() + 4, 4, preferred_blocks, possible_blocks)) {
				switch(chunk_type){
					case "co64":
						mp4box co64_block;
						preferred_blocks -= ("co64", "stco");
						possible_blocks -= ("co64", "stco");
						break;
					case "stco":
						mp4box stco_block;
						preferred_blocks -= ("co64", "stco");
						possible_blocks -= ("co64", "stco");
						break;
					case "stsc":
						mp4box stsc_block;
						preferred_blocks -= ("stsc", "stsz", "stz2");
						possible_blocks -= ("stsc", "stsz", "stz2");
						
						local string nextValues[] = {"stsz"};
						ReadBytes(chunk_type, FTell() + 4, 4, nextValues, nextValues);
						mp4box stsz_block;
						break;
					case "stsd":
						mp4box stsd_block;
						preferred_blocks -= chunk_type;
						possible_blocks -= chunk_type;
						break;
					case "stsz":
						mp4box stsz_block;
						preferred_blocks -= ("stsc", "stsz", "stz2");
						possible_blocks -= ("stsc", "stsz", "stz2");						
						//generate stsc
						break;
					case "stz2":
						mp4box stz2_block;
						preferred_blocks -= ("stsc", "stsz", "stz2");
						possible_blocks -= ("stsc", "stsz", "stz2");						
						//TODO generate stsc
						break;
					case "stts":
						mp4box stts_block;
						preferred_blocks -= chunk_type;
						possible_blocks -= chunk_type;
						break;
					case "ctts":
						mp4box ctts_block;
						possible_blocks -= chunk_type;
						break;
					case "stss":
						mp4box stss_block;
						possible_blocks -= chunk_type;
						break;
					case "stsh":
						mp4box stsh_block;
						possible_blocks -= chunk_type;
						break;
					case "stdb":
						mp4box stdb_block;
						possible_blocks -= chunk_type;
						break;
					case "sdtp":
						mp4box sdtp_block;
						possible_blocks -= chunk_type;
						break;
					case "sbgp":
						mp4box sbgp_block;
						possible_blocks -= chunk_type;
						break;
					case "sgpd":
						mp4box sgpd_block;
						possible_blocks -= chunk_type;
						break;
					case "subs":
						mp4box subs_block;
						possible_blocks -= chunk_type;
						break;
					default:
						mp4box unknown_block;
						break;
				}
			} 	
			break;
		case "stsd":
            byte version = {0};
            byte flag[3];
			
			uint32 entry_count = {1}; 
			local uint32 i;
			local char chunk_type[4];
			local string preferred_blocks[] = {"avc1"};
			local string possible_blocks[] = {"avc1"}; 
			for(i=0; i<entry_count; i++){
				ReadBytes(chunk_type, FTell() + 4, 4, preferred_blocks, possible_blocks);
				mp4box avc1_box;				
			}
            break;
		case "avc1":
			local uint32 tmp = 0;
			for (; tmp<6; tmp++)
				byte reserved = {0};
			uint16 data_reference_index = {1}; 
			for (tmp=0; tmp<16; tmp++)
				byte reserved = {0};
			
			uint16 width;
			uint16 height;
			
			uint32 horizresolution = {0x00480000}; // 72 dpi
			uint32 vertresolution = {0x00480000}; // 72 dpi
			uint32 reserved = {0};
			uint16 frame_count = {1};
			byte compressorname[32];
			uint16 depth = {0x0018};
			uint16 pre_defined = {0x0018}; 
			
			local string blocks[] = {"avcC"};			
			ReadBytes(chunk_type, FTell() + 4, 4, blocks, blocks);
			mp4box avcC_box;	
			break;
		case "avcC":
			byte configurationVersion = {1};
			byte AVCProfileIndication;
			byte profile_compatibility;
			byte AVCLevelIndication; 
		    ubyte reserved_lengthSizeMinusOne = {0xFC, 0xFD, 0xFE,0xFF};
			ubyte reserved_numOfSequenceParameterSets = {0xE1};
			
			local byte tmp_masked = 1;
			local byte i;
			for (i=0; i< tmp_masked;  i++) {
				uint16 sequenceParameterSetLength = {0x18};
				byte sequenceParameterSetNALUnit[sequenceParameterSetLength];
			}
			byte numOfPictureParameterSets = {1};
			for (i=0; i< numOfPictureParameterSets;  i++) {
				uint16 pictureParameterSetLength = {0x06};
				byte  pictureParameterSetNALUnit[pictureParameterSetLength];
			}		
			break;
		case "mp4a":
			uint32 reserved_a = {0};
			uint16 reserved_b = {0};
			uint16 data_reference_index = {1}; 
			uint64 reserved_c = {0};
			
			uint16 channelcount = {2};
			uint16 samplesize = {16};  
			uint16 pre_defined = {0}; 
			uint16 reserved_d = {0}; 
			
			uint16 samplerate_tmp;
			FSeek(FTell()-2);
			local uint32 tmp; 
			tmp = samplerate_tmp*65536;
            uint32 samplerate = {tmp};
			
			local char chunk_type[4];
			local string preferred_blocks[] = {"esds"};
			local string possible_blocks[] = {"esds"};			
			ReadBytes(chunk_type, FTell() + 4, 4, preferred_blocks, possible_blocks);
			mp4box esds_box;		
			break;
		case "esds": //RECONSTRUCTED VALUES BY EXAMPLE FILE, TODO find better values
			byte version = {0};
            byte flag[3];
			
			uint32 sectionID_3 = {58753152}; //0 x 03 80 80 80
			uint32 data_a = {620756992}; //0 x 25 00 00 00
			
			uint32 sectionID_4 = {75530368}; //0 x 04 80 80 80
			uint32 data_b = {390075648}; //0 x 70 40 15 00
			uint16 reserved_d = {0};
			uint64 reserved_e = {0};

			uint32 sectionID_5 = {92307584}; //0 x 05 80 80 80
			uint32 data_e = {85069910}; //0 x 05 12 10 56
			uint16 data_f = {58624}; //0 x e5 00
			
			uint32 sectionID_6 = {109084800}; //0 x 06 80 80 80
			uint16 data_f = {258}; //0 x e5 00		
			break;
		case "vide": //TODO implement
			break;
		case "hint": //TODO implement
			break;
		case "stts": 
            byte version = {0};
            byte flag[3];			
			uint32 entry_count = {1};
			str_stts entry[entry_count];	   
			break;
        case "elst": 
            byte version = {0};
            byte flags[3];			
            uint32 num_entries_tmp; 
			FSeek(FTell()-4);
			local uint32 tmp = num_entries_tmp%16;
            uint32 num_entries = {tmp}; 
            elst_entry entries[num_entries];
            break;       
		case "cprt":
            byte version = {0};
			uint16 language[3];
			string notice; 
			break;
		case "iinf":
			uint16 entry_count_16_tmp; 
			FSeek(FTell()-2);
			local uint16 tmp_16 = entry_count_16_tmp % 16;
            uint16 entry_count_16 = {tmp_16}; 
			local uint16 i;
			for (i=0; i<entry_count_16; i++){
				uint16  item_ID = {(uint16)i};  
				uint16  item_protection_index;
				string   item_name;  
				string   content_type;  
				string   content_encoding; //optional 
			}
			break;
		case "dinf": 
			local char chunk_type[4];
			local string tmp_s[] = {"url ",}; //TODO add "dref" for more variety, reenable "urn "
			ReadBytes(chunk_type, FTell()+4, 4, tmp_s, tmp_s); // one mandatory
			switch (chunk_type){
				case "url ":
					mp4box url_box;
					break;  
				case "dref":
					mp4box dref_box;
					break;  
				case "urn ":
					mp4box urn_box;
					break;  
				default:
					mp4box unknown_block;
					break;
			}			
			break;
		case "url ":	
            byte version = {0};
            byte flag[3]; 
			string location;
			break;
		case "urn ":  			
            byte version = {0};
            byte flag[3]; 
			string name;
			string location;
			break;
		case "smhd": 
            byte version = {0};
            byte flags[3];
            fp16 balance;
            uint16 reserved;
            break;      
        case "vmhd": 
            byte version = {0};
            vmhd_flags flags = {1};
            qtgfxmode graphics_mode = {0};
            qtopcolor opcolor;
            break;
		case "stsc":
            byte version = {0};
            byte flag[3];
            uint32 entry_count = {1};
			
			local uint32 i;
			local uint32 sampleCount = 0;
			local uint32 currentIndex = 1;
						
			for (i=1; i <= entry_count; i++) {
				uint32 first_chunk = {currentIndex};
				local uint32 nextIndex;
				currentIndex = currentIndex + nextIndex;
				uint32 samples_per_chunk;
				sampleCount = sampleCount + samples_per_chunk;
				uint32 sample_description_index = {i};
			}
			sharedSamplecountVar = sampleCount;				
            break;
		case "co64":
            byte version = {0};
            byte flag[3];
            uint32 entry_count;
            uint64 chunk_offset[entry_count];
            break;
		case "stco":
            byte version = {0};
            byte flag[3];
						
            uint32 entry_count = {1};
			
			local uint32 i;
			for(i=0; i< entry_count; i++){
				uint32 chunk_offset = {mdatPosition};
			}
            break;
        case "stsz":
            byte version = {0};
            byte flag[3];
            uint32 sample_size;
			uint32 sample_count = {sharedSamplecountVar};
            if (sample_size == 0)
            {
				local uint32 i;
				for (i=0; i < sample_count; i++) {   
					uint32 entry_size= {16}; //TODO SELECT CORRECT VALUE HERE
				}             
			}
            break;
		case "frma":
            uint32 codingName;
            break;
        case "tenc":
            byte version;
            byte flag[3]; 
            byte reserved1;			
            if (version < 1) byte reserved2;
            else byte default_crypt_skip_byte_block;
            byte default_is_protected;
            byte default_per_sample_IV_size;
            byte default_KID[16];
            if (0 == default_per_sample_IV_size)
            {
                byte default_constant_IV_size;
                byte default_constant_IV[default_constant_IV_size];
            }
            break;
        case "schm":
            byte version;
            byte flag[3]; 
            uint32 scheme_type;
            uint32 scheme_version;
            break;
        case "pssh":
            byte version;
            byte flag[3]; 
            byte systemID[16];
            if (version > 0)
            {
                uint32 KID_count;
                struct
                {
                    byte entry[16];
                }KID[KID_count];
            }
            uint32 DataSize;
            byte Data[DataSize];
            break;
        case "senc":
            byte version;
            byte flag[3];
            uint32 sample_count;
            struct
            {
                byte per_sample_IV[8];
                if (flag[2] == 2)
                {
                    uint16 subsample_count;
                    struct
                    {   
                        uint16 bytes_of_clear_data;
                        uint32 bytes_of_protected_data;
                    }subsample_data[subsample_count];
                }
            }entry[sample_count];
            break;
        case "saio":
            byte version;
            byte flag[3];
            if ((flag[2] & 1) != 0)
            {
                uint32 aux_info_type;
                uint32 aud_info_type_parameter;
            }
            uint32 entry_count;
            if(version == 0)
                uint32 offset[entry_count];
            else
                uint64 offset[entry_count];
            break;
        case "saiz":
            byte version;
            byte flag[3];
            if ((flag[2] & 1) != 0)
            {
                uint32 aux_info_type;
                uint32 aux_info_type_parameter;
            }
            byte   default_sample_info_size;
            uint32 sample_count;
            if(default_sample_info_size == 0)
            {
                byte entry[sample_count];
            }
            break;
        case "trun":
            local uint32 i;
            byte version;
            byte flag[3];
            uint32 sample_count;
            if ((flag[2] & 1) != 0)          
				uint32 data_offset;
            if ((flag[2] & 4) != 0)          
				uint32 first_sample_flags;
            for (i = 0; i < sample_count; i++)
            {
                struct
                {
                    if((flag[1] & 1) != 0)  uint32 sample_duration;
                    if((flag[1] & 2) != 0)  uint32 sample_size;
                    if((flag[1] & 4) != 0)  uint32 sample_flags;
                    if((flag[1] & 8) != 0)
                    {
                        if (version < 1)
                            uint32 sample_composition_time_offset;
                        else
                            int32  sample_composition_time_offset;
                    }
                }entry;
            }
            break;
        case "tfhd":
            byte version;
            byte flag[3];
            uint32 trackID;
            if (0 != (flag[2] & 1))  
				uint64 base_data_offset;
            if (0 != (flag[2] & 2))  
				uint32 sample_description_index;
            if (0 != (flag[2] & 8))  
				uint32 default_sample_duration;
            if (0 != (flag[2] & 0x10))   
				uint32 default_sample_size;
            if (0 != (flag[2] & 0x20))   
				uint32 default_sample_flags;
            break;
        case "mfhd":
            byte version;
            byte flag[3];
            uint32 sequence_number;
            break;
        case "sidx":
            byte version;
            byte flag[3];
            uint32 referenceID;
            uint32 timescale;
            if (version < 1)
            {
                uint32 earliest_presentation_time;
                uint32 first_offset;
            }
            else
            {
                uint64 earliest_presentation_time;
                uint64 first_offset;
            }
            uint16 reserved;
            uint16 reference_count;
            str_sidx references[reference_count];
            break;
        case "trex":
            byte version;
            byte flag[3];
            uint32 trackID;
            uint32 default_sample_description_index;
            uint32 default_sample_duration;
            uint32 default_sample_size;
            uint32 default_sample_flags;
            break;
        case "mehd":
            byte version;
            byte flag[3];
            if(version == 0)
                uint32 fragment_duration;
            else
                uint64 fragment_duration;
            break;
        case "enca":
            byte version;
            byte flag[3];
            uint32 entry_count;
            byte data[0x14];
            break;
        case "stss":
            byte version;
            byte flag[3];
            uint32 entry_count;
            uint32 sample_number[entry_count];
            break; 
        default:
            ChangeArrayLength();
            byte unknown[contentsize];
            EndChangeArrayLength();
            break;     
    }
	
	local uint64 writePosition = FTell();
	FSeek(startOffset);
	local uint32 newSize = writePosition-startOffset;
	local int evil = SetEvilBit(false);
	uint32 size = {newSize};
	SetEvilBit(evil);
	FSeek(writePosition);
} mp4box;

//added structs
typedef struct{ //mp4file
	local char chunk_type[4];
	local string preferred_blocks[] = { "ftyp" };
	local string possible_blocks[] = { "ftyp" };
	while (ReadBytes(chunk_type, FTell() + 4, 4, preferred_blocks, possible_blocks)) {
		switch(chunk_type){
			case "ftyp":
				mp4box ftyp_block;
				local string preferred_blocks[] = { "mdat",  };
				local string possible_blocks[] = { "mdat",  "free" }; 
				break;
			case "mdat":
				mp4box mdat_block;
				local string preferred_blocks[] = { "moov",  };
				local string possible_blocks[] = { "moov",  "free" }; 
				break;
			case "moov":
				mp4box moov_block;
				preferred_blocks -= "moov";	
				possible_blocks -= "moov";
				break;
			case "free":
				mp4box free_block;
				break;
			default:
				mp4box unknown_block;
				break;
		}
	}
}mp4file;

mp4file file; 
